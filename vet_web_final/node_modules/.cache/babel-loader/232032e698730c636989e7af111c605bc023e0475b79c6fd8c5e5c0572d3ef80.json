{"ast":null,"code":"var _jsxFileName = \"/Users/meganbender/CSCI_221/vet_web_final/src/components/Contact.jsx\",\n  _s = $RefreshSig$();\n// Importing React and useState hook for managing component state\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Contact() {\n  _s();\n  // State to manage the form data entered by the user\n  const [formData, setFormData] = useState({\n    myName: \"\",\n    // Field for the user's name\n    myEmail: \"\",\n    // Field for the user's email\n    myReason: \"\",\n    // Field for the reason for contact\n    myComments: \"\" // Field for additional comments\n  });\n  // State to store the server's response message\n  const [responseMessage, setResponseMessage] = useState(\"\");\n  // Handler to update the formData state when user changes any input field\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      // Keep the existing form data\n      [e.target.name]: e.target.value // Update the field that triggered the change\n    });\n  };\n  // Handler to process form submission\n  const handleSubmit = async e => {\n    e.preventDefault(); // Prevent default form submission behavior (e.g., page reload)\n    try {\n      // Send a POST request to the server with the form data\n      const response = await fetch(\"http://localhost:3000/submit-contact\", {\n        method: \"POST\",\n        // HTTP method\n        headers: {\n          \"Content-Type\": \"application/json\" // Specify JSON content type\n        },\n        body: JSON.stringify(formData) // Convert form data to JSON\n      });\n      // Parse the JSON response from the server\n      const data = await response.json();\n      if (response.ok) {\n        // If the server responds with success, display the message and data\n        setResponseMessage(`\n                    ${data.message}\n                    Here is the data you submitted:\n                    - Name: ${data.receivedData.name}\n                    - Email: ${data.receivedData.email}\n                    - Reason: ${data.receivedData.reason}\n                    - Comments: ${data.receivedData.comments}\n                    `);\n        // Reset the form fields to empty values after submission\n        setFormData({\n          myName: \"\",\n          myEmail: \"\",\n          myReason: \"\",\n          myComments: \"\"\n        });\n      } else {\n        // If the server responds with an error, display the error message\n        setResponseMessage(data.error || \"Something went wrong.\");\n      }\n    } catch (error) {\n      // Handle any network or unexpected errors\n      console.error(\"Error:\", error);\n      setResponseMessage(\"Failed to submit the form. Try again later.\");\n    }\n  };\n  // The JSX for rendering the contact form and server response message\n  return /*#__PURE__*/_jsxDEV(\"main\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Contact Fish Creek\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Fill out the form below to contact Fish Creek. All information is required.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmit,\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"myName\",\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"myName\",\n        name: \"myName\",\n        value: formData.myName,\n        onChange: handleChange // Call handleChange on field change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"myEmail\",\n        children: \"E-mail:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"myEmail\",\n        name: \"myEmail\",\n        value: formData.myEmail,\n        onChange: handleChange // Call handleChange on field change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"myReason\",\n        children: \"Reason for Contact:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        id: \"myReason\",\n        name: \"myReason\",\n        list: \"reasons\" // Connect to the datalist with id=\"reasons\"\n        ,\n        value: formData.myReason,\n        onChange: handleChange // Call handleChange on field change\n        ,\n        required: true // Make this field required\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"datalist\", {\n        id: \"reasons\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"New Patient\",\n          children: \"New Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Appointment\",\n          children: \"Appointment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"House Call\",\n          children: \"House Call\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Information\",\n          children: \"Information\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"Ask the Vet\",\n          children: \"Ask the Vet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"myComments\",\n        children: \"Comments:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        rows: \"2\",\n        cols: \"20\",\n        id: \"myComments\",\n        name: \"myComments\",\n        value: formData.myComments,\n        onChange: handleChange // Call handleChange on field change\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"submit\",\n        value: \"Send Now\",\n        id: \"mySubmit\",\n        name: \"mySubmit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), responseMessage && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: responseMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 33\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 9\n  }, this);\n}\n// Export the Contact component so it can be used in other parts of the application\n_s(Contact, \"RDAT2dNgy/yD5UuTozB2UbaOxGw=\");\n_c = Contact;\nexport default Contact;\nvar _c;\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Contact","_s","formData","setFormData","myName","myEmail","myReason","myComments","responseMessage","setResponseMessage","handleChange","e","target","name","value","handleSubmit","preventDefault","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","receivedData","email","reason","comments","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","htmlFor","type","id","onChange","list","required","rows","cols","_c","$RefreshReg$"],"sources":["/Users/meganbender/CSCI_221/vet_web_final/src/components/Contact.jsx"],"sourcesContent":["// Importing React and useState hook for managing component state\nimport React, { useState } from \"react\";\nfunction Contact() {\n    // State to manage the form data entered by the user\n    const [formData, setFormData] = useState({\n        myName: \"\", // Field for the user's name\n        myEmail: \"\", // Field for the user's email\n        myReason: \"\", // Field for the reason for contact\n        myComments: \"\", // Field for additional comments\n    });\n    // State to store the server's response message\n    const [responseMessage, setResponseMessage] = useState(\"\");\n    // Handler to update the formData state when user changes any input field\n    const handleChange = (e) => {\n        setFormData({\n            ...formData, // Keep the existing form data\n            [e.target.name]: e.target.value, // Update the field that triggered the change\n        });\n    };\n    // Handler to process form submission\n    const handleSubmit = async (e) => {\n        e.preventDefault(); // Prevent default form submission behavior (e.g., page reload)\n        try {\n            // Send a POST request to the server with the form data\n            const response = await fetch(\"http://localhost:3000/submit-contact\", {\n                method: \"POST\", // HTTP method\n                headers: {\n                    \"Content-Type\": \"application/json\", // Specify JSON content type\n                },\n                body: JSON.stringify(formData), // Convert form data to JSON\n            });\n            // Parse the JSON response from the server\n            const data = await response.json();\n            if (response.ok) {\n                // If the server responds with success, display the message and data\n                setResponseMessage(`\n                    ${data.message}\n                    Here is the data you submitted:\n                    - Name: ${data.receivedData.name}\n                    - Email: ${data.receivedData.email}\n                    - Reason: ${data.receivedData.reason}\n                    - Comments: ${data.receivedData.comments}\n                    `);\n                // Reset the form fields to empty values after submission\n                setFormData({\n                    myName: \"\",\n                    myEmail: \"\",\n                    myReason: \"\",\n                    myComments: \"\",\n                });\n            } else {\n                // If the server responds with an error, display the error message\n                setResponseMessage(data.error || \"Something went wrong.\");\n            }\n        } catch (error) {\n            // Handle any network or unexpected errors\n            console.error(\"Error:\", error);\n            setResponseMessage(\"Failed to submit the form. Try again later.\");\n        }\n    };\n    // The JSX for rendering the contact form and server response message\n    return (\n        <main>\n            <h2>Contact Fish Creek</h2>\n            <p>Fill out the form below to contact Fish Creek. All information is\n                required.</p>\n            {/* Form to collect contact details */}\n            <form onSubmit={handleSubmit}>\n                {/* Name field */}\n                <label htmlFor=\"myName\">Name:</label>\n                <input\n                    type=\"text\"\n                    id=\"myName\"\n                    name=\"myName\"\n                    value={formData.myName}\n                    onChange={handleChange} // Call handleChange on field change\n                />\n                {/* Email field */}\n                <label htmlFor=\"myEmail\">E-mail:</label>\n                <input\n                    type=\"text\"\n                    id=\"myEmail\"\n                    name=\"myEmail\"\n                    value={formData.myEmail}\n                    onChange={handleChange} // Call handleChange on field change\n                />\n                {/* Explanation:\n                - The `htmlFor` attribute in JSX is equivalent to the standard\n                `for` attribute in HTML.\n                - In JSX, `for` is a reserved keyword in JavaScript, so React\n                uses `htmlFor` instead.\n                - It connects the <label> tag to the input field with the\n                matching `id`.\n                - For example, `htmlFor=\"myName\"` links the label to the input\n                field with `id=\"myName\"`.\n                */}\n                {/* Reason for contact with a dropdown list */}\n                <label htmlFor=\"myReason\">Reason for Contact:</label>\n                <input\n                    type=\"text\"\n                    id=\"myReason\"\n                    name=\"myReason\"\n                    list=\"reasons\" // Connect to the datalist with id=\"reasons\"\n                    value={formData.myReason}\n                    onChange={handleChange} // Call handleChange on field change\n                    required // Make this field required\n                />\n                {/* Predefined options for the reason */}\n                <datalist id=\"reasons\">\n                    <option value=\"New Patient\">New Patient</option>\n                    <option value=\"Appointment\">Appointment</option>\n                    <option value=\"House Call\">House Call</option>\n                    <option value=\"Information\">Information</option>\n                    <option value=\"Ask the Vet\">Ask the Vet</option>\n                </datalist>\n                {/* Comments field */}\n                <label htmlFor=\"myComments\">Comments:</label>\n                <textarea\n                    rows=\"2\"\n                    cols=\"20\"\n                    id=\"myComments\"\n                    name=\"myComments\"\n                    value={formData.myComments}\n                    onChange={handleChange} // Call handleChange on field change\n                ></textarea>\n                {/* Submit button */}\n                <input type=\"submit\" value=\"Send Now\" id=\"mySubmit\" name=\"mySubmit\"\n                />\n            </form>\n            {/* Display the server response message if it exists */}\n            {responseMessage && <p>{responseMessage}</p>}\n        </main>\n    );\n}\n// Export the Contact component so it can be used in other parts of the application\nexport default Contact;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}